State 4 conflicts: 9 shift/reduce
State 31 conflicts: 1 reduce/reduce
State 53 conflicts: 1 shift/reduce
State 71 conflicts: 9 shift/reduce
State 91 conflicts: 9 shift/reduce
State 92 conflicts: 9 shift/reduce
State 93 conflicts: 9 shift/reduce


Grammar

    0 $accept: program $end

    1 program: mood_declaration statements

    2 mood_declaration: MOOD_SARCASTIC
    3                 | MOOD_ROMANTIC
    4                 | ε

    5 statements: statements statement
    6           | statement
    7           | ε

    8 statement: variable_decl SEMICOLON
    9          | expression SEMICOLON
   10          | print_statement SEMICOLON
   11          | if_statement
   12          | for_statement

   13 variable_decl: romantic_decl
   14              | sarcastic_decl
   15              | IDENTIFIER ASSIGN expression
   16              | IDENTIFIER ASSIGN STRING_LITERAL

   17 romantic_decl: LET identifier_term BE AS RADIANT AS THE NUMBER INTEGER

   18 sarcastic_decl: SARCASTIC_WOW identifier_term IS SARCASTIC_NOW INTEGER SARCASTIC_REV

   19 print_statement: PRINT print_value

   20 print_value: expression
   21            | STRING_LITERAL
   22            | identifier_term

   23 $@1: ε

   24 if_statement: IF condition THEN $@1 if_block

   25 if_block: if_true_block ENDIF

   26 $@2: ε

   27 if_block: if_true_block ELSE $@2 if_false_block ENDIF

   28 if_true_block: statements

   29 if_false_block: statements

   30 condition: expression EQ expression
   31          | expression GT expression
   32          | expression LT expression
   33          | NOT condition
   34          | LPAREN condition RPAREN
   35          | expression

   36 identifier_term: IDENTIFIER

   37 expression: INTEGER
   38           | identifier_term
   39           | expression PLUS expression
   40           | expression MINUS expression
   41           | expression TIMES expression
   42           | expression DIVIDE expression
   43           | expression MOD expression
   44           | LPAREN expression RPAREN

   45 $@3: ε

   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH expression SARCASTIC_UNTIL expression $@3 statements SARCASTIC_NEXT

   47 $@4: ε

   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH expression ROMANTIC_UNTIL expression $@4 statements ROMANTIC_NEXT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    MOOD_SARCASTIC (258) 2
    MOOD_ROMANTIC (259) 3
    LET (260) 17
    BE (261) 17
    AS (262) 17
    RADIANT (263) 17
    THE (264) 17
    NUMBER (265) 17
    IS (266) 18
    SARCASTIC_WOW (267) 18
    SARCASTIC_NOW (268) 18
    SARCASTIC_REV (269) 18
    PLUS (270) 39
    MINUS (271) 40
    TIMES (272) 41
    DIVIDE (273) 42
    MOD (274) 43
    ASSIGN (275) 15 16
    SEMICOLON (276) 8 9 10
    LPAREN (277) 34 44
    RPAREN (278) 34 44
    PRINT (279) 19
    IF (280) 24
    THEN (281) 24
    ELSE (282) 27
    ENDIF (283) 25 27
    EQ (284) 30
    GT (285) 31
    LT (286) 32
    NOT (287) 33
    INTEGER <num> (288) 17 18 37
    IDENTIFIER <str> (289) 15 16 36 46 48
    STRING_LITERAL <str> (290) 16 21
    SARCASTIC_FOR (291) 46
    SARCASTIC_WITH (292) 46
    SARCASTIC_UNTIL (293) 46
    SARCASTIC_NEXT (294) 46
    ROMANTIC_FOR (295) 48
    ROMANTIC_WITH (296) 48
    ROMANTIC_UNTIL (297) 48
    ROMANTIC_NEXT (298) 48


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1
        on right: 0
    mood_declaration (46)
        on left: 2 3 4
        on right: 1
    statements (47)
        on left: 5 6 7
        on right: 1 5 28 29 46 48
    statement (48)
        on left: 8 9 10 11 12
        on right: 5 6
    variable_decl (49)
        on left: 13 14 15 16
        on right: 8
    romantic_decl <str> (50)
        on left: 17
        on right: 13
    sarcastic_decl <str> (51)
        on left: 18
        on right: 14
    print_statement (52)
        on left: 19
        on right: 10
    print_value <str> (53)
        on left: 20 21 22
        on right: 19
    if_statement <num> (54)
        on left: 24
        on right: 11
    $@1 (55)
        on left: 23
        on right: 24
    if_block <num> (56)
        on left: 25 27
        on right: 24
    $@2 (57)
        on left: 26
        on right: 27
    if_true_block <num> (58)
        on left: 28
        on right: 25 27
    if_false_block <num> (59)
        on left: 29
        on right: 27
    condition <expr_result> (60)
        on left: 30 31 32 33 34 35
        on right: 24 33 34
    identifier_term <str> (61)
        on left: 36
        on right: 17 18 22 38
    expression <expr_result> (62)
        on left: 37 38 39 40 41 42 43 44
        on right: 9 15 20 30 31 32 35 39 40 41 42 43 44 46 48
    for_statement <num> (63)
        on left: 46 48
        on right: 12
    $@3 (64)
        on left: 45
        on right: 46
    $@4 (65)
        on left: 47
        on right: 48


State 0

    0 $accept: • program $end

    MOOD_SARCASTIC  shift, and go to state 1
    MOOD_ROMANTIC   shift, and go to state 2

    $default  reduce using rule 4 (mood_declaration)

    program           go to state 3
    mood_declaration  go to state 4


State 1

    2 mood_declaration: MOOD_SARCASTIC •

    $default  reduce using rule 2 (mood_declaration)


State 2

    3 mood_declaration: MOOD_ROMANTIC •

    $default  reduce using rule 3 (mood_declaration)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 5


State 4

    1 program: mood_declaration • statements

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    LET            [reduce using rule 7 (statements)]
    SARCASTIC_WOW  [reduce using rule 7 (statements)]
    LPAREN         [reduce using rule 7 (statements)]
    PRINT          [reduce using rule 7 (statements)]
    IF             [reduce using rule 7 (statements)]
    INTEGER        [reduce using rule 7 (statements)]
    IDENTIFIER     [reduce using rule 7 (statements)]
    SARCASTIC_FOR  [reduce using rule 7 (statements)]
    ROMANTIC_FOR   [reduce using rule 7 (statements)]
    $default       reduce using rule 7 (statements)

    statements       go to state 15
    statement        go to state 16
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 5

    0 $accept: program $end •

    $default  accept


State 6

   17 romantic_decl: LET • identifier_term BE AS RADIANT AS THE NUMBER INTEGER

    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 26


State 7

   18 sarcastic_decl: SARCASTIC_WOW • identifier_term IS SARCASTIC_NOW INTEGER SARCASTIC_REV

    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 27


State 8

   44 expression: LPAREN • expression RPAREN

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 28


State 9

   19 print_statement: PRINT • print_value

    LPAREN          shift, and go to state 8
    INTEGER         shift, and go to state 11
    IDENTIFIER      shift, and go to state 25
    STRING_LITERAL  shift, and go to state 29

    print_value      go to state 30
    identifier_term  go to state 31
    expression       go to state 32


State 10

   24 if_statement: IF • condition THEN $@1 if_block

    LPAREN      shift, and go to state 33
    NOT         shift, and go to state 34
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    condition        go to state 35
    identifier_term  go to state 22
    expression       go to state 36


State 11

   37 expression: INTEGER •

    $default  reduce using rule 37 (expression)


State 12

   15 variable_decl: IDENTIFIER • ASSIGN expression
   16              | IDENTIFIER • ASSIGN STRING_LITERAL
   36 identifier_term: IDENTIFIER •

    ASSIGN  shift, and go to state 37

    $default  reduce using rule 36 (identifier_term)


State 13

   46 for_statement: SARCASTIC_FOR • IDENTIFIER SARCASTIC_WITH expression SARCASTIC_UNTIL expression $@3 statements SARCASTIC_NEXT

    IDENTIFIER  shift, and go to state 38


State 14

   48 for_statement: ROMANTIC_FOR • IDENTIFIER ROMANTIC_WITH expression ROMANTIC_UNTIL expression $@4 statements ROMANTIC_NEXT

    IDENTIFIER  shift, and go to state 39


State 15

    1 program: mood_declaration statements •
    5 statements: statements • statement

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    $default  reduce using rule 1 (program)

    statement        go to state 40
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 16

    6 statements: statement •

    $default  reduce using rule 6 (statements)


State 17

    8 statement: variable_decl • SEMICOLON

    SEMICOLON  shift, and go to state 41


State 18

   13 variable_decl: romantic_decl •

    $default  reduce using rule 13 (variable_decl)


State 19

   14 variable_decl: sarcastic_decl •

    $default  reduce using rule 14 (variable_decl)


State 20

   10 statement: print_statement • SEMICOLON

    SEMICOLON  shift, and go to state 42


State 21

   11 statement: if_statement •

    $default  reduce using rule 11 (statement)


State 22

   38 expression: identifier_term •

    $default  reduce using rule 38 (expression)


State 23

    9 statement: expression • SEMICOLON
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    PLUS       shift, and go to state 43
    MINUS      shift, and go to state 44
    TIMES      shift, and go to state 45
    DIVIDE     shift, and go to state 46
    MOD        shift, and go to state 47
    SEMICOLON  shift, and go to state 48


State 24

   12 statement: for_statement •

    $default  reduce using rule 12 (statement)


State 25

   36 identifier_term: IDENTIFIER •

    $default  reduce using rule 36 (identifier_term)


State 26

   17 romantic_decl: LET identifier_term • BE AS RADIANT AS THE NUMBER INTEGER

    BE  shift, and go to state 49


State 27

   18 sarcastic_decl: SARCASTIC_WOW identifier_term • IS SARCASTIC_NOW INTEGER SARCASTIC_REV

    IS  shift, and go to state 50


State 28

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression
   44           | LPAREN expression • RPAREN

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47
    RPAREN  shift, and go to state 51


State 29

   21 print_value: STRING_LITERAL •

    $default  reduce using rule 21 (print_value)


State 30

   19 print_statement: PRINT print_value •

    $default  reduce using rule 19 (print_statement)


State 31

   22 print_value: identifier_term •
   38 expression: identifier_term •

    SEMICOLON  reduce using rule 22 (print_value)
    SEMICOLON  [reduce using rule 38 (expression)]
    $default   reduce using rule 38 (expression)


State 32

   20 print_value: expression •
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 20 (print_value)


State 33

   34 condition: LPAREN • condition RPAREN
   44 expression: LPAREN • expression RPAREN

    LPAREN      shift, and go to state 33
    NOT         shift, and go to state 34
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    condition        go to state 52
    identifier_term  go to state 22
    expression       go to state 53


State 34

   33 condition: NOT • condition

    LPAREN      shift, and go to state 33
    NOT         shift, and go to state 34
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    condition        go to state 54
    identifier_term  go to state 22
    expression       go to state 36


State 35

   24 if_statement: IF condition • THEN $@1 if_block

    THEN  shift, and go to state 55


State 36

   30 condition: expression • EQ expression
   31          | expression • GT expression
   32          | expression • LT expression
   35          | expression •
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47
    EQ      shift, and go to state 56
    GT      shift, and go to state 57
    LT      shift, and go to state 58

    $default  reduce using rule 35 (condition)


State 37

   15 variable_decl: IDENTIFIER ASSIGN • expression
   16              | IDENTIFIER ASSIGN • STRING_LITERAL

    LPAREN          shift, and go to state 8
    INTEGER         shift, and go to state 11
    IDENTIFIER      shift, and go to state 25
    STRING_LITERAL  shift, and go to state 59

    identifier_term  go to state 22
    expression       go to state 60


State 38

   46 for_statement: SARCASTIC_FOR IDENTIFIER • SARCASTIC_WITH expression SARCASTIC_UNTIL expression $@3 statements SARCASTIC_NEXT

    SARCASTIC_WITH  shift, and go to state 61


State 39

   48 for_statement: ROMANTIC_FOR IDENTIFIER • ROMANTIC_WITH expression ROMANTIC_UNTIL expression $@4 statements ROMANTIC_NEXT

    ROMANTIC_WITH  shift, and go to state 62


State 40

    5 statements: statements statement •

    $default  reduce using rule 5 (statements)


State 41

    8 statement: variable_decl SEMICOLON •

    $default  reduce using rule 8 (statement)


State 42

   10 statement: print_statement SEMICOLON •

    $default  reduce using rule 10 (statement)


State 43

   39 expression: expression PLUS • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 63


State 44

   40 expression: expression MINUS • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 64


State 45

   41 expression: expression TIMES • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 65


State 46

   42 expression: expression DIVIDE • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 66


State 47

   43 expression: expression MOD • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 67


State 48

    9 statement: expression SEMICOLON •

    $default  reduce using rule 9 (statement)


State 49

   17 romantic_decl: LET identifier_term BE • AS RADIANT AS THE NUMBER INTEGER

    AS  shift, and go to state 68


State 50

   18 sarcastic_decl: SARCASTIC_WOW identifier_term IS • SARCASTIC_NOW INTEGER SARCASTIC_REV

    SARCASTIC_NOW  shift, and go to state 69


State 51

   44 expression: LPAREN expression RPAREN •

    $default  reduce using rule 44 (expression)


State 52

   34 condition: LPAREN condition • RPAREN

    RPAREN  shift, and go to state 70


State 53

   30 condition: expression • EQ expression
   31          | expression • GT expression
   32          | expression • LT expression
   35          | expression •
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression
   44           | LPAREN expression • RPAREN

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47
    RPAREN  shift, and go to state 51
    EQ      shift, and go to state 56
    GT      shift, and go to state 57
    LT      shift, and go to state 58

    RPAREN  [reduce using rule 35 (condition)]


State 54

   33 condition: NOT condition •

    $default  reduce using rule 33 (condition)


State 55

   24 if_statement: IF condition THEN • $@1 if_block

    $default  reduce using rule 23 ($@1)

    $@1  go to state 71


State 56

   30 condition: expression EQ • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 72


State 57

   31 condition: expression GT • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 73


State 58

   32 condition: expression LT • expression

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 74


State 59

   16 variable_decl: IDENTIFIER ASSIGN STRING_LITERAL •

    $default  reduce using rule 16 (variable_decl)


State 60

   15 variable_decl: IDENTIFIER ASSIGN expression •
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 15 (variable_decl)


State 61

   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH • expression SARCASTIC_UNTIL expression $@3 statements SARCASTIC_NEXT

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 75


State 62

   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH • expression ROMANTIC_UNTIL expression $@4 statements ROMANTIC_NEXT

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 76


State 63

   39 expression: expression • PLUS expression
   39           | expression PLUS expression •
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 39 (expression)


State 64

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   40           | expression MINUS expression •
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 40 (expression)


State 65

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   41           | expression TIMES expression •
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    $default  reduce using rule 41 (expression)


State 66

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   42           | expression DIVIDE expression •
   43           | expression • MOD expression

    $default  reduce using rule 42 (expression)


State 67

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression
   43           | expression MOD expression •

    $default  reduce using rule 43 (expression)


State 68

   17 romantic_decl: LET identifier_term BE AS • RADIANT AS THE NUMBER INTEGER

    RADIANT  shift, and go to state 77


State 69

   18 sarcastic_decl: SARCASTIC_WOW identifier_term IS SARCASTIC_NOW • INTEGER SARCASTIC_REV

    INTEGER  shift, and go to state 78


State 70

   34 condition: LPAREN condition RPAREN •

    $default  reduce using rule 34 (condition)


State 71

   24 if_statement: IF condition THEN $@1 • if_block

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    LET            [reduce using rule 7 (statements)]
    SARCASTIC_WOW  [reduce using rule 7 (statements)]
    LPAREN         [reduce using rule 7 (statements)]
    PRINT          [reduce using rule 7 (statements)]
    IF             [reduce using rule 7 (statements)]
    INTEGER        [reduce using rule 7 (statements)]
    IDENTIFIER     [reduce using rule 7 (statements)]
    SARCASTIC_FOR  [reduce using rule 7 (statements)]
    ROMANTIC_FOR   [reduce using rule 7 (statements)]
    $default       reduce using rule 7 (statements)

    statements       go to state 79
    statement        go to state 16
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    if_block         go to state 80
    if_true_block    go to state 81
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 72

   30 condition: expression EQ expression •
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 30 (condition)


State 73

   31 condition: expression GT expression •
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 31 (condition)


State 74

   32 condition: expression LT expression •
   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 32 (condition)


State 75

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression
   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH expression • SARCASTIC_UNTIL expression $@3 statements SARCASTIC_NEXT

    PLUS             shift, and go to state 43
    MINUS            shift, and go to state 44
    TIMES            shift, and go to state 45
    DIVIDE           shift, and go to state 46
    MOD              shift, and go to state 47
    SARCASTIC_UNTIL  shift, and go to state 82


State 76

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression
   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH expression • ROMANTIC_UNTIL expression $@4 statements ROMANTIC_NEXT

    PLUS            shift, and go to state 43
    MINUS           shift, and go to state 44
    TIMES           shift, and go to state 45
    DIVIDE          shift, and go to state 46
    MOD             shift, and go to state 47
    ROMANTIC_UNTIL  shift, and go to state 83


State 77

   17 romantic_decl: LET identifier_term BE AS RADIANT • AS THE NUMBER INTEGER

    AS  shift, and go to state 84


State 78

   18 sarcastic_decl: SARCASTIC_WOW identifier_term IS SARCASTIC_NOW INTEGER • SARCASTIC_REV

    SARCASTIC_REV  shift, and go to state 85


State 79

    5 statements: statements • statement
   28 if_true_block: statements •

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    $default  reduce using rule 28 (if_true_block)

    statement        go to state 40
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 80

   24 if_statement: IF condition THEN $@1 if_block •

    $default  reduce using rule 24 (if_statement)


State 81

   25 if_block: if_true_block • ENDIF
   27         | if_true_block • ELSE $@2 if_false_block ENDIF

    ELSE   shift, and go to state 86
    ENDIF  shift, and go to state 87


State 82

   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH expression SARCASTIC_UNTIL • expression $@3 statements SARCASTIC_NEXT

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 88


State 83

   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH expression ROMANTIC_UNTIL • expression $@4 statements ROMANTIC_NEXT

    LPAREN      shift, and go to state 8
    INTEGER     shift, and go to state 11
    IDENTIFIER  shift, and go to state 25

    identifier_term  go to state 22
    expression       go to state 89


State 84

   17 romantic_decl: LET identifier_term BE AS RADIANT AS • THE NUMBER INTEGER

    THE  shift, and go to state 90


State 85

   18 sarcastic_decl: SARCASTIC_WOW identifier_term IS SARCASTIC_NOW INTEGER SARCASTIC_REV •

    $default  reduce using rule 18 (sarcastic_decl)


State 86

   27 if_block: if_true_block ELSE • $@2 if_false_block ENDIF

    $default  reduce using rule 26 ($@2)

    $@2  go to state 91


State 87

   25 if_block: if_true_block ENDIF •

    $default  reduce using rule 25 (if_block)


State 88

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression
   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH expression SARCASTIC_UNTIL expression • $@3 statements SARCASTIC_NEXT

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 45 ($@3)

    $@3  go to state 92


State 89

   39 expression: expression • PLUS expression
   40           | expression • MINUS expression
   41           | expression • TIMES expression
   42           | expression • DIVIDE expression
   43           | expression • MOD expression
   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH expression ROMANTIC_UNTIL expression • $@4 statements ROMANTIC_NEXT

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    MOD     shift, and go to state 47

    $default  reduce using rule 47 ($@4)

    $@4  go to state 93


State 90

   17 romantic_decl: LET identifier_term BE AS RADIANT AS THE • NUMBER INTEGER

    NUMBER  shift, and go to state 94


State 91

   27 if_block: if_true_block ELSE $@2 • if_false_block ENDIF

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    LET            [reduce using rule 7 (statements)]
    SARCASTIC_WOW  [reduce using rule 7 (statements)]
    LPAREN         [reduce using rule 7 (statements)]
    PRINT          [reduce using rule 7 (statements)]
    IF             [reduce using rule 7 (statements)]
    INTEGER        [reduce using rule 7 (statements)]
    IDENTIFIER     [reduce using rule 7 (statements)]
    SARCASTIC_FOR  [reduce using rule 7 (statements)]
    ROMANTIC_FOR   [reduce using rule 7 (statements)]
    $default       reduce using rule 7 (statements)

    statements       go to state 95
    statement        go to state 16
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    if_false_block   go to state 96
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 92

   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH expression SARCASTIC_UNTIL expression $@3 • statements SARCASTIC_NEXT

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    LET            [reduce using rule 7 (statements)]
    SARCASTIC_WOW  [reduce using rule 7 (statements)]
    LPAREN         [reduce using rule 7 (statements)]
    PRINT          [reduce using rule 7 (statements)]
    IF             [reduce using rule 7 (statements)]
    INTEGER        [reduce using rule 7 (statements)]
    IDENTIFIER     [reduce using rule 7 (statements)]
    SARCASTIC_FOR  [reduce using rule 7 (statements)]
    ROMANTIC_FOR   [reduce using rule 7 (statements)]
    $default       reduce using rule 7 (statements)

    statements       go to state 97
    statement        go to state 16
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 93

   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH expression ROMANTIC_UNTIL expression $@4 • statements ROMANTIC_NEXT

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    LET            [reduce using rule 7 (statements)]
    SARCASTIC_WOW  [reduce using rule 7 (statements)]
    LPAREN         [reduce using rule 7 (statements)]
    PRINT          [reduce using rule 7 (statements)]
    IF             [reduce using rule 7 (statements)]
    INTEGER        [reduce using rule 7 (statements)]
    IDENTIFIER     [reduce using rule 7 (statements)]
    SARCASTIC_FOR  [reduce using rule 7 (statements)]
    ROMANTIC_FOR   [reduce using rule 7 (statements)]
    $default       reduce using rule 7 (statements)

    statements       go to state 98
    statement        go to state 16
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 94

   17 romantic_decl: LET identifier_term BE AS RADIANT AS THE NUMBER • INTEGER

    INTEGER  shift, and go to state 99


State 95

    5 statements: statements • statement
   29 if_false_block: statements •

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14

    $default  reduce using rule 29 (if_false_block)

    statement        go to state 40
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 96

   27 if_block: if_true_block ELSE $@2 if_false_block • ENDIF

    ENDIF  shift, and go to state 100


State 97

    5 statements: statements • statement
   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH expression SARCASTIC_UNTIL expression $@3 statements • SARCASTIC_NEXT

    LET             shift, and go to state 6
    SARCASTIC_WOW   shift, and go to state 7
    LPAREN          shift, and go to state 8
    PRINT           shift, and go to state 9
    IF              shift, and go to state 10
    INTEGER         shift, and go to state 11
    IDENTIFIER      shift, and go to state 12
    SARCASTIC_FOR   shift, and go to state 13
    SARCASTIC_NEXT  shift, and go to state 101
    ROMANTIC_FOR    shift, and go to state 14

    statement        go to state 40
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 98

    5 statements: statements • statement
   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH expression ROMANTIC_UNTIL expression $@4 statements • ROMANTIC_NEXT

    LET            shift, and go to state 6
    SARCASTIC_WOW  shift, and go to state 7
    LPAREN         shift, and go to state 8
    PRINT          shift, and go to state 9
    IF             shift, and go to state 10
    INTEGER        shift, and go to state 11
    IDENTIFIER     shift, and go to state 12
    SARCASTIC_FOR  shift, and go to state 13
    ROMANTIC_FOR   shift, and go to state 14
    ROMANTIC_NEXT  shift, and go to state 102

    statement        go to state 40
    variable_decl    go to state 17
    romantic_decl    go to state 18
    sarcastic_decl   go to state 19
    print_statement  go to state 20
    if_statement     go to state 21
    identifier_term  go to state 22
    expression       go to state 23
    for_statement    go to state 24


State 99

   17 romantic_decl: LET identifier_term BE AS RADIANT AS THE NUMBER INTEGER •

    $default  reduce using rule 17 (romantic_decl)


State 100

   27 if_block: if_true_block ELSE $@2 if_false_block ENDIF •

    $default  reduce using rule 27 (if_block)


State 101

   46 for_statement: SARCASTIC_FOR IDENTIFIER SARCASTIC_WITH expression SARCASTIC_UNTIL expression $@3 statements SARCASTIC_NEXT •

    $default  reduce using rule 46 (for_statement)


State 102

   48 for_statement: ROMANTIC_FOR IDENTIFIER ROMANTIC_WITH expression ROMANTIC_UNTIL expression $@4 statements ROMANTIC_NEXT •

    $default  reduce using rule 48 (for_statement)
